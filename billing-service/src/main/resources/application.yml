order:
  load: 80
  unload: 50

spring:
  datasource:
    url: jdbc:postgresql://localhost:5433/postgres
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver

  cache:
    type: caffeine
  caffeine:
    spec: maximumSize=10000, expireAfterWrite=30d

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true

  flyway:
    schemas: billing
    table: flyway_schema_history_billing
    enabled: true
    locations: classpath:db/migration

  cloud:
    function:
      # Здесь перечисляем через точку с запятой обе функции: обработчик заказов и функцию для отчётов.
      definition: orderEventConsumer;reportRequestFunction
    stream:
      defaultBinder: kafka
      binders:
        kafka:
          type: kafka
          environment:
            spring:
              cloud:
                stream:
                  kafka:
                    binder:
                      brokers: kafka:9092
      bindings:
        # Канал для приёма событий создания заказов.
        orderEventConsumer-in-0:
          destination: order-created-topic
          group: billing-service-group
          content-type: application/json
        # Канал для приёма запроса на отчёт.
        reportRequestFunction-in-0:
          destination: report-request-topic
          group: billing-service-group
          content-type: application/json
        # Канал для отправки ответа по отчёту.
        reportRequestFunction-out-0:
          destination: report-response-topic
          content-type: application/json

server:
  port: 8084

logging:
  level:
    root: INFO
  file:
    name: logs/console-service.log


